{"version":3,"sources":["ConverterRow.js","App.js","serviceWorker.js","index.js"],"names":["ConverterRow","props","currencyOptions","selectedCurrency","onChangeHandle","onChangeAmount","amount","type","className","placeholder","value","onChange","map","option","key","BASE_URL","App","fromAmount","toAmount","useState","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","setAmount","amountInFromCurrency","setAmountInFromCurrency","exchangeRate","setExchangeRate","useEffect","fetch","then","res","json","data","firstCurrency","Object","keys","rates","base","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wPAEe,SAASA,EAAaC,GAAQ,IAErCC,EAKAD,EALAC,gBACAC,EAIAF,EAJAE,iBACAC,EAGAH,EAHAG,eACAC,EAEAJ,EAFAI,eACAC,EACAL,EADAK,OAEJ,OACI,6BACI,2BAAOC,KAAK,SAASC,UAAU,QAAQC,YAAY,sBAAsBC,MAAOJ,EAAQK,SAAUN,IAClG,4BAAQK,MAAOP,EAAkBQ,SAAUP,GACtCF,EAAgBU,KAAI,SAAAC,GAAM,OAC3B,4BAAQC,IAAKD,EAAQH,MAAOG,GAA5B,IAAsCA,QCXtD,IAAME,EAAU,yCAsEDC,MApEf,WAAgB,IASVC,EAAYC,EATH,EACiCC,mBAAS,IAD1C,mBACNjB,EADM,KACWkB,EADX,OAE2BD,qBAF3B,mBAENE,EAFM,KAEQC,EAFR,OAGuBH,qBAHvB,mBAGNI,EAHM,KAGMC,EAHN,OAIeL,mBAAS,GAJxB,mBAINb,EAJM,KAIEmB,EAJF,OAK2CN,oBAAS,GALpD,mBAKNO,EALM,KAKgBC,EALhB,OAMuCR,qBANvC,gCAO2BA,sBAP3B,mBAONS,EAPM,KAOQC,EAPR,KA8Cb,OApCGH,GACDT,EAAaX,EACbY,EAAWZ,EAASsB,IAEpBV,EAAWZ,EACXW,EAAaX,EAASsB,GAGxBE,qBAAU,WACRC,MAAMhB,GACDiB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAMC,EAAgBC,OAAOC,KAAKH,EAAKI,OAAO,GAC9CnB,EAAmB,CAACe,EAAKK,MAAP,mBAAgBH,OAAOC,KAAKH,EAAKI,UACnDjB,EAAgBa,EAAKK,MACrBhB,EAAcY,GACdP,EAAgBM,EAAKI,MAAMH,SAEnC,IAEFN,qBAAU,WACW,MAAhBT,GAAsC,MAAdE,GACvBQ,MAAM,GAAD,OAAIhB,EAAJ,iBAAqBM,EAArB,oBAA6CE,IAC9CS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIN,EAAgBM,EAAKI,MAAMhB,SAE9C,CAACF,EAAaE,IAWd,oCACA,kDACA,kBAACvB,EAAD,CACEE,gBAAiBA,EACjBC,iBAAkBkB,EAClBjB,eAAgB,SAAAqC,GAAC,OAAInB,EAAgBmB,EAAEC,OAAOhC,QAC9CL,eAfH,SAAgCoC,GAC/BhB,EAAUgB,EAAEC,OAAOhC,OACnBiB,GAAwB,IActBrB,OAASW,IAEX,yBAAKT,UAAU,UAAf,KACA,kBAACR,EAAD,CACEE,gBAAiBA,EACjBC,iBAAkBoB,EAClBnB,eAAgB,SAAAqC,GAAC,OAAIjB,EAAciB,EAAEC,OAAOhC,QAC5CL,eAnBH,SAA8BoC,GAC7BhB,EAAUgB,EAAEC,OAAOhC,OACnBiB,GAAwB,IAkBtBrB,OAAUY,MCxDIyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d1f157d3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function ConverterRow(props) {\r\n    const{\r\n        currencyOptions,\r\n        selectedCurrency,\r\n        onChangeHandle,\r\n        onChangeAmount,\r\n        amount\r\n    } = props\r\n    return (\r\n        <div>\r\n            <input type=\"number\" className=\"input\" placeholder=\"Enter Your Currency\" value={amount} onChange={onChangeAmount}/> \r\n            <select value={selectedCurrency} onChange={onChangeHandle}>\r\n                {currencyOptions.map(option => (\r\n                <option key={option} value={option}>${option}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport ConverterRow from './ConverterRow';\nimport {useEffect, useState} from 'react'\nconst BASE_URL ='https://api.exchangeratesapi.io/latest'\n\nfunction App() {\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [fromCurrency, setFromCurrency] = useState() //Eur\n  const [toCurrency, setToCurrency] = useState()\n  const [amount, setAmount] = useState(1)\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true)\n  const [amountInToCurrency, setAmountInToCurrency] = useState()\n  const [exchangeRate, setExchangeRate] = useState()\n  \n  let fromAmount, toAmount\n  if(amountInFromCurrency){\n    fromAmount = amount;\n    toAmount = amount * exchangeRate;\n  }else{\n    toAmount = amount;\n    fromAmount = amount / exchangeRate;\n  }\n\n  useEffect(() => {\n    fetch(BASE_URL)\n        .then(res => res.json())\n        .then(data => {\n          const firstCurrency = Object.keys(data.rates)[0]\n          setCurrencyOptions([data.base, ...Object.keys(data.rates)]) \n          setFromCurrency(data.base)\n          setToCurrency(firstCurrency)\n          setExchangeRate(data.rates[firstCurrency])\n        })\n},[])\n  \nuseEffect(()=>{\n  if(fromCurrency != null && toCurrency != null){\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n         .then(res => res.json())\n         .then(data => setExchangeRate(data.rates[toCurrency]))\n   }\n  },[fromCurrency,toCurrency])\n\n   function handleFromAmountChange(e){\n    setAmount(e.target.value)\n    setAmountInFromCurrency(true)\n   }\n   function handleToAmountChange(e){\n    setAmount(e.target.value)\n    setAmountInFromCurrency(false)\n  }\n  return (\n    <>\n    <h1>Currency Converter</h1>\n    <ConverterRow\n      currencyOptions={currencyOptions}\n      selectedCurrency={fromCurrency}\n      onChangeHandle={e => setFromCurrency(e.target.value)}\n      onChangeAmount= {handleFromAmountChange}\n      amount ={fromAmount}\n    />\n    <div className=\"equals\">=</div>\n    <ConverterRow\n      currencyOptions={currencyOptions}\n      selectedCurrency={toCurrency}\n      onChangeHandle={e => setToCurrency(e.target.value)}\n      onChangeAmount= {handleToAmountChange}\n      amount = {toAmount}\n    />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}